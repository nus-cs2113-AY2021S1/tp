@startuml
!include style.puml
show member
skinparam arrowThickness 1.1

Class "{abstract}\nCommand" as Command LOGIC_COLOR {
    + {abstract} execute(ui : Ui, access : Access, storage : Storage) : void
}
Class "{abstract}\nEditCommand" as EditCommand LOGIC_COLOR {
    + {abstract} execute(ui : Ui, access : Access, storage : Storage) : void
    # prepareBeforeEdit(type : String, content : String) : String
    # prepareAfterEdit(type : String, content : String) : String
}
Class EditChapterCommand LOGIC_COLOR {
    - editIndex : int
    - chapter : String
    + EditChapterCommand(editIndex : int, chapter : String)
    + execute(ui : Ui, access : Access, storage : Storage) : void
    - editChapter(access : Access, storage : Storage) : String
}

Class Access MODEL_COLOR {
    + getModule() : Module
}
Class Module MODEL_COLOR {
    + getChapters() : ChapterList

}
Class ChapterList MODEL_COLOR {
    + getChapter(chapterIndex : int) : Chapter
    + checkChapterExistence(newChapterName : String) : boolean
}
Class Chapter MODEL_COLOR {
    # chapterName : String
    + setChapterName(chapterName : String)
}

Class Storage STORAGE_COLOR {
    + renameChapter(newChapterName : String,
    module : Module, chapter : Chapter) : void
}

Class Ui UI_COLOR {
    + showToUser(message : String) : void
}

EditCommand -up[LOGIC_COLOR_T4]-|> Command
EditChapterCommand -up[LOGIC_COLOR_T4]-|> EditCommand

EditChapterCommand .down[LOGIC_COLOR_T4].> Access
EditChapterCommand .down[LOGIC_COLOR_T4].> Storage
EditChapterCommand .down[LOGIC_COLOR_T4].> Ui

Access -left[MODEL_COLOR_T4]-> " 0..1 " Module

Module *-up[MODEL_COLOR_T4]-> " 0..1 " ChapterList
ChapterList *-up[MODEL_COLOR_T4]-> " * " Chapter

EditChapterCommand .down[LOGIC_COLOR_T4].> Module
EditChapterCommand .left[LOGIC_COLOR_T4].> ChapterList
EditChapterCommand .left[LOGIC_COLOR_T4].> Chapter

@enduml
