@startuml

!include style.puml
show member
skinparam arrowThickness 1.1

Class "{abstract} \n Command" as Command LOGIC_COLOR {
  + {abstract} execute(ui : Ui, access : Access,
  storage : Storage) : void
}

Class "ReviseCommand" as ReviseCommand LOGIC_COLOR {
    + ReviseCommand(reviseIndex : int)
    + execute(ui : Ui , access : Access, storage : Storage) : void
    - reviseIndex : int
    - getChapter(reviseIndex : int, access : Access) : Chapter
    - getCards(access : Access, storage : Storage,
    chapter : Chapter) : ArrayList<Card>
    - reviseCard(count : int, c : Card, ui : Ui,
    repeatCards : ArrayList<Card>, scanner : Scanner) : int
    - rateCard(ui : Ui, repeatCards : ArrayList<Card>, c : Card,
    input : String, scanner : Scanner) : ArrayList<Card>
    - promptNotDue(ui : Ui, toRevise : Chapter,
    scanner : Scanner) : boolean
    - repeatRevision(ui : Ui, cards : ArrayList<Card>,
    count : int, scanner : Scanner)

}

Class "Scheduler" as Scheduler LOGIC_COLOR {
    + computeEasyInterval(previousInterval : int) : int
    + computeMediumInterval(previousInterval : int) : int
    + computeHardInterval(previousInterval : int) : int
    + computeChapDeadline(cards : CardList) : LocalDate
}

Class "HistoryCommand" as HistoryCommand LOGIC_COLOR {
    + addHistory(access : Access, storage : Storage,
    reviseIndex : int) : void
}

Class "Access" as Access MODEL_COLOR {
    + getModule() : Module
}

Class "Module" as Module MODEL_COLOR  {
    + getChapters() : ChapterList
}

Class "Chapter" as Chapter MODEL_COLOR {
    + setCards(cards : ArrayList<Card>) : void
}

Class "ChapterList" as ChapterList MODEL_COLOR {
    + getChapter(chapterIndex : int) : Chapter
}

Class "Card" as Card MODEL_COLOR {
    + getPreviousInterval() : int
    + setPreviousInterval(newInterval : int) : void
    + setRating(rating : int) : void
}

Class "Ui" as Ui UI_COLOR {
    + showToUser(message : String) : void
    + showCardRevision(c : Card, scanner : Scanner) : void
    + getInput(prompt : String, scanner : Scanner) : String
    + getAnswerInput(c : Card, scanner : Scanner) : void
}

Class "Storage" as Storage STORAGE_COLOR {
    + loadCard(module : String, chapter : String) : ArrayList<Card>
    + saveCards(cards : CardList , module : String,
    chapter : String) : LocalDate
}

ReviseCommand -right[LOGIC_COLOR_T4]-|> Command
ReviseCommand .left[LOGIC_COLOR_T4].> Scheduler
ReviseCommand .down[LOGIC_COLOR_T4].> HistoryCommand
ReviseCommand .down[LOGIC_COLOR_T4].> Ui
ReviseCommand .up[LOGIC_COLOR_T4].> Access
ReviseCommand .down[LOGIC_COLOR_T4].> Card
ReviseCommand .up[LOGIC_COLOR_T4].> ChapterList
ReviseCommand .up[LOGIC_COLOR_T4].> Chapter
ReviseCommand .up[LOGIC_COLOR_T4].> Module
ReviseCommand .down[LOGIC_COLOR_T4].> Storage
Module *-left[MODEL_COLOR]-> "0..1" ChapterList
ChapterList *-left[MODEL_COLOR]->"*" Chapter
Access *-left[MODEL_COLOR]>"0..1" Module
Storage -down[HIDDEN]-> Ui
@enduml