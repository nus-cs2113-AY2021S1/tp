@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":ExcludeCommand" as E LOGIC_COLOR
end box

box Ui UI_COLOR_T1
participant "ui:Ui" as U UI_COLOR
end box

box Storage STORAGE_COLOR_T1
participant "storage:Storage" as S STORAGE_COLOR
participant ":StorageWrite" as SW STORAGE_COLOR
participant ":StorageLoad" as SL STORAGE_COLOR
end box

skinparam sequence {
  GroupBodyBackgroundColor Transparent
}

-> E : execute()
activate E
    E -> E : attemptToExclude()
    activate E
    alt if type equals "chapter"
        E -> E : addChapterToExclusion()
        activate E
            E -> U : getExcludedModuleName
            activate U
            U --> E : moduleName
            deactivate U
            E -> U : getExcludedChapterName
            activate U
            U --> E : chapterName
            deactivate U
            E -> S : appendChapterToExclusionFile(moduleName, chapterName)
            activate S
                S -> SW : appendChapterToExclusionFile(moduleName, chapterName)
                activate SW
                    SW -> SL : loadExclusionFile()
                    activate SL
                    SL --> SW : excludedChapters
                    deactivate SL
                    SW -> SW : addEntryToExclusionFile(moduleName, chapterName)
                    activate SW
                    deactivate SW
                    SW -> SW : updateExclusionFile()
                    activate SW
                    deactivate SW
                SW --> S
                deactivate SW
            S --> E
            deactivate S
        deactivate E
    else if type equals "module"
        E -> E : addModuleToExclusion()
        activate E
            E -> U : getExcludedModuleName
            activate U
            U --> E : moduleName
            deactivate U
            E -> S : appendModuleToExclusionFile(moduleName)
            activate S
                S -> SW : appendModuleToExclusionFile(moduleName)
                activate SW
                    SW -> SL : loadExclusionFile()
                    activate SL
                    SL --> SW : excludedChapters
                    deactivate SL
                    SW -> SL : loadChaptersFromSpecifiedModule(moduleName)
                    activate SL
                    SL --> SW : chaptersInModule
                    deactivate SL
                    loop for chapter in chaptersInModule
                    SW -> SW : addEntryToExclusionFile(moduleName, chapter)
                    activate SW
                    deactivate SW
                    end
                    SW -> SW : updateExclusionFile()
                    activate SW
                    deactivate SW
                SW --> S
                deactivate SW
            S --> E
            deactivate S
            deactivate E
        deactivate E
    end
deactivate E
@enduml
