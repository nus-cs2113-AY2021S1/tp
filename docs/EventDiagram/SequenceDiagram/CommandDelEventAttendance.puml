@startuml
 -> ":CommandDelEventAttendance": execute()

activate ":CommandDelEventAttendance"
":CommandDelEventAttendance" -> ":EventList" : deleteAttendance(eventName, memberName)
activate ":EventList"
":EventList" -> ":EventList" : checkEventExistence(eventName)
opt event does not exist
":EventList" --> ":CommandDelEventAttendance" : output
<-- ":CommandDelEventAttendance" : output
end

":EventList" -> ":EventList" : findEventByName(eventName)
activate ":MemberList"
":EventList" -> ":MemberList" : checkMemberExistence(memberName)
":MemberList" -> ":Event" : getEventParticipants()
activate ":Event"
return
":MemberList" --> ":EventList"
deactivate ":MemberList"
opt participant does not exist
":EventList" --> ":CommandDelEventAttendance" : output
<-- ":CommandDelEventAttendance" : output
end

activate ":MemberList"
":EventList" -> ":MemberList" : findMemberIndex(list, memberName)
activate ":MemberList"
":MemberList" -> ":Event" : getEventParticipants()
activate ":Event"
return index
":MemberList" --> ":EventList" :index
deactivate ":MemberList"
":EventList" -> ":Event" : getEventParticipants()
activate ":Event"
":Event" -> ":Event" : get(index)
return getMemberName()

":EventList" -> ":Event" : getEventParticipants()
activate ":Event"
":Event" -> ":Event" : remove(index)
return output

":EventList" -> ":Event" : eventParticipants
activate ":Event"
":Event" -> ":Event" : size()
return output

deactivate ":Event"


":EventList" --> ":CommandDelEventAttendance" : output
deactivate ":EventList"
<-- ":CommandDelEventAttendance" : output
deactivate ":CommandDelEventAttendance"




@enduml